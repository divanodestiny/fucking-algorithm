package leetcode036

import (
	"testing"
)

func TestSolution(t *testing.T) {
	data := [][][]byte{
		{
			{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
			{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
			{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
			{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
			{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
			{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
			{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
			{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
			{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
		},
		{
			{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
			{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
			{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
			{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
			{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
			{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
			{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
			{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
			{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
		},
	}
	for _, item := range data {
		isValidSudoku(item)
	}
}

func isValidSudoku(board [][]byte) bool {
	var m33 [3][3]int16 // 3*3格子标记
	var m99 [2][9]int16 // 9*9横纵标记, 0标识横, 1标识纵

	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {
			if board[i][j] > '9' || board[i][j] < '1' {
				continue
			}
			num := int16(1 << (board[i][j] - '1'))
			if ((m33[i/3][j/3] | m99[0][i] | m99[1][j]) & num) != 0 {
				return false
			}
			m33[i/3][j/3] += num
			m99[0][i] += num
			m99[1][j] += num
		}
	}
	return true
}
